from .rk import RK

euler = RK([[0]], [1], 'Euler')

heun_rk2 = RK([[0, 0],
            [1, 0]],
        [0.5, 0.5], 'Heun RK2')

midpoint = RK([[0, 0],
                  [0.5, 0]],
              [0, 1], 'Midpoint')

kutta_rk3 = RK([[0, 0, 0],
                         [0.5, 0, 0],
                         [-1, 2, 0]],
               [1/6, 2/3, 1/6], 'Kutta RK3')

heun_rk3 = RK([[0, 0, 0],
                        [1/3, 0, 0],
                        [0, 2/3, 0]],
              [1/4, 0, 3/4], 'Heun RK3')

# Ralston's Third-Order Method (RK3)
ralston_rk3 = RK([[0, 0, 0],
                           [1/2, 0, 0],
                           [0, 3/4, 0]],
                 [2/9, 1/3, 4/9], 'Ralston RK3')

rk4 = RK([[0, 0, 0, 0],
                           [0.5, 0, 0, 0],
                           [0, 0.5, 0, 0],
                           [0, 0, 1, 0]],
                 [1/6, 1/3, 1/3, 1/6], 'RK4')

cash_karp = RK([[0, 0, 0, 0, 0, 0],
                            [1/5, 0, 0, 0, 0, 0],
                            [3/40, 9/40, 0, 0, 0, 0],
                            [3/10, -9/10, 6/5, 0, 0, 0],
                            [-11/54, 5/2, -70/27, 35/27, 0, 0],
                            [1631/55296, 175/512, 575/13824, 44275/110592, 253/4096, 0]],
                  [37/378, 0, 250/621, 125/594, 0, 512/1771], 'Cash-Karp RK5')

# Dormandâ€“Prince Method (RK5(4))
dopri = RK([[0, 0, 0, 0, 0, 0, 0],
                                 [1/5, 0, 0, 0, 0, 0, 0],
                                 [3/40, 9/40, 0, 0, 0, 0, 0],
                                 [44/45, -56/15, 32/9, 0, 0, 0, 0],
                                 [19372/6561, -25360/2187, 64448/6561, -212/729, 0, 0, 0],
                                 [9017/3168, -355/33, 46732/5247, 49/176, -5103/18656, 0, 0],
                                 [35/384, 0, 500/1113, 125/192, -2187/6784, 11/84, 0]],
                       [35/384, 0, 500/1113, 125/192, -2187/6784, 11/84, 0], 'DOPRI')

rkf45 = RK([[0, 0, 0, 0, 0, 0],
                     [1/4, 0, 0, 0, 0, 0],
                     [3/32, 9/32, 0, 0, 0, 0],
                     [1932/2197, -7200/2197, 7296/2197, 0, 0, 0],
                     [439/216, -8, 3680/513, -845/4104, 0, 0],
                     [-8/27, 2, -3544/2565, 1859/4104, -11/40, 0]],
           [16/135, 0, 6656/12825, 28561/56430, -9/50, 2/55], 'RKF45')

#######################################################################################
################################# Implicit Methods ####################################
#######################################################################################

backward_euler = RK([[1]], [1], 'Backward Euler')
implicit_midpoint = RK([[0.5]], [1], 'Implicit Midpoint')
crank_nicolson = RK([[0, 0],
                                  [0.5, 0.5]],
                        [0.5, 0.5], 'Crank Nicolson')